#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os, sys
from slack_sdk import WebClient
import argparse
import re

# Example:
# $ hogehoge | post2slack
#

slacktoken_file = 'slack_token'
channel_name = 'random'
base_dir = os.path.join(os.environ['HOME'], 'etc')

def get_channel_list(client, limit=200):
    params = {
        'exclude_archived': 'true',
        'types': 'public_channel',
        'limit': str(limit),
        }
    channels = client.api_call('conversations.list', params=params)
    if channels['ok']:
        return channels['channels']
    else:
        return None

def get_channel_id(client, channel_name):
    channels = filter(lambda x: x['name']==channel_name , get_channel_list(client))
    target = None
    for c in channels:
        if target is not None:
            break
        else:
            target = c
    if target is None:
        return None
    else:
        return target['id']


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--channel', default=channel_name,
                        help='slack channel to post.')
    parser.add_argument('--slacktoken', default=None,
                        help='slack bot token.')
    parser.add_argument('--slacktokenfile', default=None,
                        help='file including slack bot token.')
    parser.add_argument('--ts', default=None,
                        help='specify the thread ts.')
    parser.add_argument('--mute', help='post in thread without showing on channel.',
                        action='store_true')
    parser.add_argument('--separator', default=None,
                        help='split posts by lines beginning with the specified separator (regex available).')
    parser.add_argument('--optionline', default='%',
                        help='set in-line-header to set options in the input.')    
    args = parser.parse_args()
    argc = len(sys.argv)
    slacktoken_file_path = os.path.join(base_dir, slacktoken_file)

    message_lines = sys.stdin.readlines()
    if not ''.join(message_lines).strip():
        exit()

    submessages = []
    submessage_lines = []
    for line in message_lines:
        if not args.separator or not re.match(args.separator, line):
            submessage_lines.append(line)
        elif submessage_lines:
            submessages.append(submessage_lines)
            submessage_lines = []
    else:
        if submessage_lines:
            submessages.append(submessage_lines)

    for submessage_lines in submessages:
        sys.argv = sys.argv[:argc]
        args = parser.parse_args()

        # read submessage options
        options = []
        option_lines = 0
        for line in submessage_lines:
            m = re.match(args.optionline, line)
            if m:
                options += line[m.end():].strip().split()
                option_lines += 1
            else:
                break
        if option_lines:
            sys.argv += options
            args = parser.parse_args()

        submessage = ''.join(submessage_lines[option_lines:]).rstrip('\n')
        # continue if submessage is empty
        if not submessage.strip():
            continue

        # set submessage parameters
        if args.slacktoken:
            token = args.slacktoken
        elif args.slacktokenfile:
            with open(args.slacktokenfile, 'r') as f:
                token = f.readline().rstrip()
        else:
            with open(slacktoken_file_path, 'r') as f:
                token = f.readline().rstrip()
        web_client = WebClient(token=token)
        channel_id = get_channel_id(web_client, args.channel)

        params={
            'channel': channel_id,
        }
        if args.ts:
            params['thread_ts'] = args.ts
            if not args.mute:
                params['reply_broadcast'] = 'True'

        # post submessage
        params['text'] = submessage
        response = web_client.api_call(
            'chat.postMessage',
            params=params
        )
