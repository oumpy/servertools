#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# sstm: SnapShot TimeMachine
#
# How to Use:
# # sstm [options] /path/to/originalvol /path/to/snapshots
#
# Works in Btrfs only.

import os, subprocess
import datetime
import argparse
import yaml
import re
from bisect import bisect_left

defaultconf = {
    # [interval/hour, cycles]
    'unit': 'hour',
    'rule': [
        [1, 24],    # 24 hours
        [24, 30],   # 30 days
        [720, -1],  # infinite months
    ],
}

interval_unit = { # minute = 1
    'minute': 1,
    'hour': 60,
    'day': 60 * 24,
    'week': 60 * 24 * 7,
    'decday': 60 * 24 * 10,
    'month': 60 * 24 * 30,
    'trimonth': 60 * 24 * 90,
    'quarteryear': 60 * 24 * 90,
    'halfyear': 60 * 24 * 180,
    'year': 60 * 24 * 360,
}

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'origvol',
        help='Mount point of the original volume to take snapshots.',
    )
    parser.add_argument(
        'ssdir',
        nargs='?',
        default=None,
        help='directory to make snapshots of the original volume. For zfs, omit it.',
    )
    parser.add_argument(
        '-z',
        '--zfs',
        default=None,
        help='name of zfs filesystem. Default: same as the mount point.',
    )
    parser.add_argument(
        '-f',
        '--filesystem',
        default='btrfs',
        help='filesystem of the volume, supporting btrfs & zfs.'
    )
    parser.add_argument(
        '-c',
        '--config',
        default=None,
        help='specify the config yaml file.',
    )
    parser.add_argument(
        '-s',
        '--suffix',
        default='',
        help='suffix for snapshot names.',
    )
    parser.add_argument(
        '-p',
        '--postss',
        default=None,
        help='script to execute on the snapshot.',
    )
    parser.add_argument(
        '-q',
        '--quota',
        action='store_true',
        help='destroy associating qgroup at the same time as the snapshot. (Quota should be enabled.)',
    )
    parser.add_argument(
        '-l',
        '--latest',
        action='store_true',
        help='make a snapshot named \'latest\' in the snapshots directory.',
    )
    args = parser.parse_args()

    # read setting file
    config = dict()
    config.update(defaultconf)
    if args.config:
        with open(args.config, 'r') as yml:
            config.update(yaml.safe_load(yml))

    if len(args.suffix) > 0:
        args.suffix = '-' + args.suffix

    # snapshot name : year-date-time + suffix
    ssreg = re.compile(r'([0-9]{4})-([0-9]{4})-([0-9]{4})' + args.suffix)
    ssformat = '%Y-%m%d-%H%M' + args.suffix

    # make new snapshot for current status of the volume
    latest_name = 'latest'
    newss = datetime.datetime.now().strftime(ssformat)
    if args.filesystem.lower() == 'btrfs':
        newss_path = os.path.join(args.ssdir, newss)
        latest_path = os.path.join(args.ssdir, latest_name)
        subprocess.call(
            ['btrfs', 'subvolume', 'snapshot',
            args.origvol, newss_path,
            ])
        if os.path.isdir(latest_path):
            subprocess.call(
                ['btrfs', 'subvolume', 'delete',
                latest_path,
                ])
        if args.latest:
            subprocess.call('sync')
            subprocess.call(
                ['btrfs', 'subvolume', 'snapshot',
                newss_path, latest_path,
                ])

    elif args.filesystem.lower() == 'zfs':
        if not args.zfs:
            args.zfs = os.path.join(os.getcwd(), args.origvol).strip('/')
        if not args.ssdir:
            args.ssdir = os.path.join(args.origvol, '.zfs/snapshot/')
        if os.path.isdir(os.path.join(args.ssdir, latest_name)):
            subprocess.call(
                ['zfs', 'destroy',
                 '{}@{}'.format(args.zfs, latest_name),
                ])
        subprocess.call(
            ['zfs', 'snapshot',
             '{}@{}'.format(args.zfs, newss),
            ])
        if args.latest:
            subprocess.call('sync')
            subprocess.call(
                ['zfs', 'snapshot',
                '{}@{}'.format(args.zfs, latest_name),
                ])

    # execute postss script (if specified)
    if args.postss:
        postss = os.path.abspath(args.postss)
        os.chdir(newss_path)
        subprocess.call(postss)

    # list existing snapshots & get timestamps
    snapshots = [ d for d in os.listdir(args.ssdir)
                    if os.path.isdir(os.path.join(args.ssdir, d)) and ssreg.fullmatch(d)]
    snapshots.sort()
    N = len(snapshots)
    timestamp = [ datetime.datetime.strptime(ss, ssformat) for ss in snapshots]
    keepflag = [False]*N
    keepflag[-1] = True # always mark the newest snapshot

    # mark necessary volumes
    config['rule'].sort(key=lambda x: -x[0]) # larger interval first.
    for interval_n, cycles in config['rule']:
        interval = datetime.timedelta(minutes=interval_n * interval_unit[config['unit']])
        past_limit = timestamp[-1] - interval*cycles
        if cycles < 0 or past_limit < timestamp[0]:
            prev = 0
        else:
            prev = bisect_left(timestamp, past_limit)
        keepflag[prev] = True
        for cur in range(prev+1, N):
            if timestamp[cur] - timestamp[prev] > interval:
                prev = cur-1
                keepflag[prev] = True
            if keepflag[cur]:
                prev = cur

    # delete unnecessary snapshots
    for i in range(N):
        if not keepflag[i]:
            if args.filesystem.lower() == 'btrfs':
                target = os.path.join(args.ssdir, snapshots[i])
                if args.quota:
                    subvolid = subprocess.check_output(['btrfs_subvolid', target]).decode().split('\n')[0]
                    subprocess.call(['btrfs', 'qgroup', 'destroy', '0/{}'.format(subvolid), args.ssdir])
                subprocess.call(['btrfs', 'subvolume', 'delete',
                                 target,
                                ])
            elif args.filesystem.lower() == 'zfs':
                subprocess.call(['zfs', 'destroy',
                                 '{}@{}'.format(args.zfs, snapshots[i])
                                ])
